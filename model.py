import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.optim as optim
from torch.utils.tensorboard import SummaryWriter
import os


# Простая CNN
class SimpleCNN(nn.Module):
    """
    A simple Convolutional Neural Network (CNN) for image classification tasks.

    This class implements a straightforward architecture consisting of convolutional layers,
    activation functions, pooling layers, and fully connected layers to classify images.

    Methods:
        __init__: Initializes the SimpleCNN model.
        forward: Passes the input through the network to obtain the output.

    Attributes:
        architecture: Defines the layers and components of the CNN.

    The __init__ method sets up the architecture of the CNN, while the forward method takes an
    input tensor, processes it through the network, and returns the resulting output.
    """

    def __init__(self):
        """
        Initializes the SimpleCNN model.

            This method sets up the architecture of a simple Convolutional Neural Network (CNN)
            consisting of convolutional layers, activation functions, pooling layers,
            and fully connected layers, tailored for image classification tasks.

            Parameters:
                None

            Returns:
                None
        """
        super(SimpleCNN, self).__init__()
        self.net = nn.Sequential(
            nn.Conv2d(1, 16, 3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(16, 32, 3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Flatten(),
            nn.Linear(32 * 7 * 7, 128),
            nn.ReLU(),
            nn.Linear(128, 10),
        )

    def forward(self, x):
        """
        Passes the input through the network.

            This method takes an input tensor and feeds it through the network to obtain the output.

            Args:
                x: The input data to be processed by the network.

            Returns:
                The output generated by the network after processing the input.
        """
        return self.net(x)


if __name__ == "__main__":
    # Параметры
    epochs = 5
    batch_size = 64
    lr = 0.001
    save_path = "mnist_model.pth"

    # Трансформации и датасеты
    transform = transforms.Compose(
        [transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]
    )

    trainset = torchvision.datasets.MNIST(
        root="./data", train=True, download=True, transform=transform
    )
    trainloader = torch.utils.data.DataLoader(
        trainset, batch_size=batch_size, shuffle=True
    )

    testset = torchvision.datasets.MNIST(
        root="./data", train=False, download=True, transform=transform
    )
    testloader = torch.utils.data.DataLoader(
        testset, batch_size=batch_size, shuffle=False
    )

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = SimpleCNN().to(device)

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)

    writer = SummaryWriter()
    # Dummy input для визуализации графа
    dummy_input = torch.randn(1, 1, 28, 28).to(device)
    writer.add_graph(model, dummy_input)

    # Обучение
    for epoch in range(epochs):
        running_loss = 0.0
        total = 0
        correct = 0
        for i, data in enumerate(trainloader):
            inputs, labels = data[0].to(device), data[1].to(device)

            optimizer.zero_grad()

            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        acc = 100 * correct / total
        avg_loss = running_loss / len(trainloader)
        print(f"Epoch {epoch+1}, Loss: {avg_loss:.4f}, Accuracy: {acc:.2f}%")

        writer.add_scalar("Loss/train", avg_loss, epoch)
        writer.add_scalar("Accuracy/train", acc, epoch)

    # Сохраняем модель
    torch.save(model.state_dict(), save_path)
    torch.save(model, save_path[:-1])
    print("Model saved!")

    writer.close()
